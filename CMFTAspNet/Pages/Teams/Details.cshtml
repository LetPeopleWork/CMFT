@page
@model CMFTAspNet.Pages.Teams.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


<h1>Details</h1>

<div>
    <h4>Team</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Entity.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Entity.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Entity.ProjectName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Entity.ProjectName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Entity.WorkItemTypes)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Entity.WorkItemTypes)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Entity.FeatureWIP)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Entity.FeatureWIP)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Entity.ThroughputHistory)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Entity.ThroughputHistory)
        </dd>
    </dl>
</div>

<canvas id="throughputRunChart" width="400" height="150"></canvas>

<!-- Add button to trigger update action -->
<div>
    <form method="post">
        <input type="hidden" asp-for="Entity.Id" />
        <button type="submit" class="btn btn-primary">Refresh Throughput</button>
    </form>
</div>

<div>
    <a asp-page="./Edit" asp-route-id="@Model.Entity.Id">Edit</a> |
    <a asp-page="./Index">Back to List</a>
</div>

<script>
    var ctx = document.getElementById('throughputRunChart').getContext('2d');
    var rawData = @Html.Raw(Json.Serialize(Model.Entity.RawThroughput)); // Serialize the RawThroughput array to JSON
    var labels = Array.from({ length: rawData.length }, (_, i) => i.toString()); // Generate labels from 0 to length of RawThroughput array
    var chartData = {
        labels: labels,
        datasets: [{
            label: 'Raw Throughput',
            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Bar fill color
            borderColor: 'rgba(75, 192, 192, 1)', // Bar border color
            borderWidth: 1,
            data: rawData // Use RawThroughput array as data
        }]
    };
    var throughputRunChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
</script>

