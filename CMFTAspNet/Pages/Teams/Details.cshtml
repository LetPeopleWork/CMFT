@page
@model CMFTAspNet.Pages.Teams.DetailsModel

@{
    ViewData["Title"] = "Details";
}

<script src="/lib/Chart/Chart.min.js" integrity="sha256-d9Np49KdviSc4EDxsOPieKUBCpTmrW16eLD+BB4Vaio="></script>


<h1>@Model.Entity.Name</h1>

<div class="row">
    <div class="col">
        <form method="post">
            <input type="hidden" name="id" value="@Model.Entity.Id" />
            <button type="submit" asp-page-handler="UpdateThroughput" class="btn btn-primary">Refresh Throughput</button>
        </form>
    </div>
    <div class="col">
        <form method="post">
            <input type="hidden" name="id" value="@Model.Entity.Id" />
            <button type="submit" asp-page-handler="UpdateForecast" class="btn btn-primary">Update Forecast</button>
        </form>
    </div>
</div>



<div id="featuresTable">
    <h4>Features</h4>
    <table class="table">
        <caption>Forecasts</caption>
        <thead>
            <tr>
                <th>Feature</th>
                <th>Remaining Work</th>
                <th>50% Probability</th>
                <th>70% Probability</th>
                <th>85% Probability</th>
                <th>95% Probability</th>
                <th>Project</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var feature in Model.Features.OrderBy(f => f.Order))
            {
                @if (feature.Forecast != null)
                {
                    string GetFutureDate(int daysInFuture)
                    {
                        var futureDate = DateTime.Today.AddDays(daysInFuture);
                        return futureDate.ToString("d");
                    }

                    <tr>
                        <td>@feature.Name</td>
                        <td>@feature.RemainingWork.Sum(r => r.RemainingWorkItems)</td>
                        <td>@GetFutureDate(@feature.Forecast.GetProbability(50))</td>
                        <td>@GetFutureDate(@feature.Forecast.GetProbability(70))</td>
                        <td>@GetFutureDate(@feature.Forecast.GetProbability(85))</td>
                        <td>@GetFutureDate(@feature.Forecast.GetProbability(95))</td>
                        <td><a asp-page="../Projects/Details" asp-route-id="@feature.ProjectId">@feature.Project.Name</a></td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

<canvas id="throughputRunChart" width="400" height="150"></canvas>

<div>
    <a asp-page="./Edit" asp-route-id="@Model.Entity.Id">Edit</a> |
    <a asp-page="./Index">Back to List</a>
</div>

<script>
    var ctx = document.getElementById('throughputRunChart').getContext('2d');
    var rawData = @Html.Raw(Json.Serialize(Model.Entity.RawThroughput)); // Serialize the RawThroughput array to JSON
    var labels = Array.from({ length: rawData.length }, (_, i) => i.toString()); // Generate labels from 0 to length of RawThroughput array
    var chartData = {
        labels: labels,
        datasets: [{
            label: 'Raw Throughput',
            backgroundColor: 'rgba(75, 192, 192, 0.2)', // Bar fill color
            borderColor: 'rgba(75, 192, 192, 1)', // Bar border color
            borderWidth: 1,
            data: rawData // Use RawThroughput array as data
        }]
    };
    var throughputRunChart = new Chart(ctx, {
        type: 'bar',
        data: chartData,
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
</script>

