// <auto-generated />
using System;
using CMFTAspNet.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CMFTAspNet.Migrations
{
    [DbContext(typeof(AppContext))]
    [Migration("20240301191426_TIPRemoveID")]
    partial class TIPRemoveID
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("CMFTAspNet.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUnparentedFeature")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReferenceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Forecast.IndividualSimulationResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Key")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WhenForecastId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WhenForecastId");

                    b.ToTable("IndividualSimulationResult");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Forecast.WhenForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalTrials")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId")
                        .IsUnique();

                    b.ToTable("WhenForecast");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Milestone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestone");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DefaultAmountOfWorkItemsPerFeature")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IncludeUnparentedItems")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProjectUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SearchBy")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SearchTerm")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkItemTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CMFTAspNet.Models.RemainingWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FeatureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemainingWorkItems")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("TeamId");

                    b.ToTable("RemainingWork");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdditionalRelatedFields")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AreaPaths")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FeatureWIP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IgnoredTags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RawThroughput")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ThroughputHistory")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ThroughputUpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("WorkItemTypes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkTrackingSystem")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CMFTAspNet.Models.TeamInProject", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TeamInProject");
                });

            modelBuilder.Entity("CMFTAspNet.WorkTracking.WorkTrackingSystemOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Secret")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("WorkTrackingSystemOption");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Feature", b =>
                {
                    b.HasOne("CMFTAspNet.Models.Project", "Project")
                        .WithMany("Features")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Forecast.IndividualSimulationResult", b =>
                {
                    b.HasOne("CMFTAspNet.Models.Forecast.WhenForecast", null)
                        .WithMany("SimulationResults")
                        .HasForeignKey("WhenForecastId");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Forecast.WhenForecast", b =>
                {
                    b.HasOne("CMFTAspNet.Models.Feature", "Feature")
                        .WithOne("Forecast")
                        .HasForeignKey("CMFTAspNet.Models.Forecast.WhenForecast", "FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Milestone", b =>
                {
                    b.HasOne("CMFTAspNet.Models.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CMFTAspNet.Models.RemainingWork", b =>
                {
                    b.HasOne("CMFTAspNet.Models.Feature", "Feature")
                        .WithMany("RemainingWork")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMFTAspNet.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CMFTAspNet.Models.TeamInProject", b =>
                {
                    b.HasOne("CMFTAspNet.Models.Project", "Project")
                        .WithMany("InvolvedTeams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CMFTAspNet.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CMFTAspNet.WorkTracking.WorkTrackingSystemOption", b =>
                {
                    b.HasOne("CMFTAspNet.Models.Team", "Team")
                        .WithMany("WorkTrackingSystemOptions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Feature", b =>
                {
                    b.Navigation("Forecast")
                        .IsRequired();

                    b.Navigation("RemainingWork");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Forecast.WhenForecast", b =>
                {
                    b.Navigation("SimulationResults");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Project", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("InvolvedTeams");

                    b.Navigation("Milestones");
                });

            modelBuilder.Entity("CMFTAspNet.Models.Team", b =>
                {
                    b.Navigation("WorkTrackingSystemOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
