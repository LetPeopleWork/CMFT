name: Build And Deploy Lighthouse

env:
  DOTNET_VERSION: '8'  
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AzureDevOpsLighthouseIntegrationTestToken: ${{ secrets.AZUREDEVOPSLIGHTHOUSEINTEGRATIONTESTTOKEN }}
  JiraLighthouseIntegrationTestToken: ${{ secrets.JIRALIGHTHOUSEINTEGRATIONTESTTOKEN }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  

jobs:

  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.check.outputs.backend }}
      frontend: ${{ steps.check.outputs.frontend }}
      e2e: ${{ steps.check.outputs.e2e }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for changes
        id: check
        run: |
          git fetch origin ${{ github.base_ref }}
          github_changes=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep -q ^.github/ && echo 'true' || echo 'false')
          backend=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep -Eq '^Lighthouse.Backend(/|.Tests/)' || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')
          frontend=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep -q ^Lighthouse.Frontend/ || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')
          e2e=$(git diff --name-only origin/${{ github.base_ref }} HEAD | grep -q ^Lighthouse.EndToEndTests/ || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')
          echo "backend=$backend"
          echo "frontend=$frontend"
          echo "e2e=$e2e"
          echo "backend=$backend" >> $GITHUB_OUTPUT
          echo "frontend=$frontend" >> $GITHUB_OUTPUT
          echo "e2e=$e2e" >> $GITHUB_OUTPUT

  backend:
    name: Verify Backend
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Use Node.js
      uses: actions/setup-node@v4

    - name: Remove Frontend sonar-project.properties
      run: |
        rm ./Lighthouse.Frontend/sonar-project.properties

    - name: Backend Build Test SonarCloud
      uses: highbyte/sonarscan-dotnet@v2.3.1
      with:
        sonarProjectKey: LetPeopleWork_Lighthouse
        sonarProjectName:  Lighthouse.Backend
        sonarOrganization: letpeoplework
        dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
  
  frontend:
    name: Verify Frontend
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Use Node.js
      uses: actions/setup-node@v4

    - name: Install npm dependencies
      run: npm install
      working-directory: ./Lighthouse.Frontend

    - name: Lint Frontend
      run: npm run lint
      working-directory: ./Lighthouse.Frontend

    - name: Build Frontend
      run: npm run build
      working-directory: ./Lighthouse.Frontend

    - name: Test Frontend
      run: npm test
      working-directory: ./Lighthouse.Frontend

    - name: Generate Sonar Files
      run: npm run sonarreport
      working-directory: ./Lighthouse.Frontend

    - name: Frontend SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      working-directory: ./Lighthouse.Frontend
      run: |
        npm install -g sonarqube-scanner
        sonar-scanner

  e2etests:
    name: Verify End to End Tests
    needs: changes
    if: needs.changes.outputs.e2e == 'true'

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Use Node.js
      uses: actions/setup-node@v4

    - name: Install npm dependencies
      run: npm install
      working-directory: ./Lighthouse.EndToEndTests

    - name: Lint Frontend
      run: npm run lint
      working-directory: ./Lighthouse.EndToEndTests

    - name: Build Frontend
      run: npm run build
      working-directory: ./Lighthouse.EndToEndTests

  tag:
    runs-on: ubuntu-latest
    needs:
      - backend
      - frontend
      - e2etests

    permissions: write-all

    steps:          
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Create tag if necessary
        id: version
        uses: fregante/daily-version-action@v2
        with:
          prefix: v

      - name: Process version to create fileversion
        id: process_version
        run: |
          # Extract the version from the output of the previous step
          version=${{ steps.version.outputs.version }}
          # Remove the prefix 'v' from the version string
          fileversion=${version#v}
          # Output the processed fileversion
          echo "fileversion=$fileversion" >> $GITHUB_ENV
          echo "fileversion=$fileversion" >> $GITHUB_OUTPUT
    
      
    outputs:
      created: ${{ steps.version.outputs.created }}
      version: ${{ steps.version.outputs.version }}
      fileversion: ${{ steps.process_version.outputs.fileversion }}

  packageapp:
    runs-on: ubuntu-latest
    needs: tag

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.DOTNET_ROOT}}

      - name: Install npm dependencies
        run: npm install
        working-directory: ./Lighthouse.Frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./Lighthouse.Frontend

      - name: publish win-x64
        run: dotnet publish -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/win-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_windows.ps1
        run: cp ./Scripts/update_windows.ps1 ./Lighthouse.Backend/publish/win-x64/update_windows.ps1

      - name: publish osx-x64
        run: dotnet publish -c Release -r osx-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/osx-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_mac.sh
        run: cp ./Scripts/update_mac.sh ./Lighthouse.Backend/publish/osx-x64/update_mac.sh

      - name: Set osx executable permission
        run: chmod +x ./publish/osx-x64/Lighthouse
        working-directory: ./Lighthouse.Backend

      - name: publish linux-x64
        run: dotnet publish -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/linux-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_linux.sh
        run: cp ./Scripts/update_linux.sh ./Lighthouse.Backend/publish/linux-x64/update_linux.sh

      - name: Set linux executable permission
        run: chmod +x ./publish/linux-x64/Lighthouse
        working-directory: ./Lighthouse.Backend

      - name: Start Lighthouse Server
        run: |
          chmod +x ./publish/linux-x64/Lighthouse
          nohup ./publish/linux-x64/Lighthouse > server.log 2>&1 &
          echo "Waiting for server to be ready..."
          timeout 30 bash -c 'until curl --silent --fail http://localhost:5000; do sleep 1; done'
          echo "Server is ready!"
        working-directory: ./Lighthouse.Backend

      - uses: ./.github/actions/playwright
        name: Playwright Tests
        with:
          base-url: 'http://localhost:5000'

      - name: Stop Lighthouse Server
        if: always()
        run: pkill Lighthouse || true

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: ./Lighthouse.Backend/publish      


  docker:
    runs-on: ubuntu-latest
    needs:
      - tag
      - packageapp

    if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Build and publish a Docker image for ${{ github.repository }}
        uses: macbre/push-to-ghcr@master        
        with:
          image_name: ${{ github.repository }} 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          build_arg: VERSION=${{ needs.tag.outputs.fileversion }}
          dockerfile: Lighthouse.Backend/Dockerfile        

      - name: Start Lighthouse in Docker
        run: |
          docker run -p 8080:8080 -d --restart always ghcr.io/letpeoplework/lighthouse:latest

      - uses: ./.github/actions/playwright
        with:
          base-url: 'http://localhost:8080'

  deploy:
    runs-on: ubuntu-latest
    needs:
      - tag
      - packageapp

    if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'

    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    permissions:
      contents: write
      id-token: write

    steps:

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.DOTNET_ROOT}}

      - name: Install npm dependencies
        run: npm install
        working-directory: ./Lighthouse.Frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./Lighthouse.Frontend

      - name: publish app-service
        run: dotnet publish -c Release /p:UseAppHost=false -p:PublishSingleFile=false --no-self-contained -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/app-service
        working-directory: ./Lighthouse.Backend

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8A96BB1E9EB043EE9CB0B648544834B0 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_6D622DE733434D3A987E82D0DBCEE2B3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6A0B9B55694C47F4A1D8CEA847E84D78 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp  
        uses: azure/webapps-deploy@v2  
        with:  
          app-name: 'LighthouseCloudDemo'  
          slot-name: 'production'  
          package: ./Lighthouse.Backend/publish/app-service

      - name: Build Demo Frontend
        run: npm run build-demo
        working-directory: ./Lighthouse.Frontend

      - name: publish demo-app-service
        run: dotnet publish -c Release /p:UseAppHost=false -p:PublishSingleFile=false --no-self-contained -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/app-service-demo
        working-directory: ./Lighthouse.Backend

      - name: Login to Azure Demo
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_D7E0D36B15D941ADA2E6DC045BD2657C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_64D9025B99C440B99E3CA60650996BC9 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F83A94E3D5A4415D80A648231AD879CE }}

      - name: Deploy to Azure Demo Web App
        id: deploy-to-demo-webapp  
        uses: azure/webapps-deploy@v2  
        with:  
          app-name: 'lighthousepublicdemo'  
          slot-name: 'production'  
          package: ./Lighthouse.Backend/publish/app-service-demo
      
  release:
    runs-on: ubuntu-latest
    needs:
    - tag
    - deploy
    - docker

    if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'

    environment:
      name: Release

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Build and publish a Docker image for ${{ github.repository }}
        uses: macbre/push-to-ghcr@master        
        with:
          image_name: ${{ github.repository }} 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: Lighthouse.Backend/Dockerfile          
          build_arg: VERSION=${{ needs.tag.outputs.fileversion }}
          image_tag: ${{ needs.tag.outputs.version }}

      - uses: actions/download-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: LighthouseArtifacts

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/win-x64
          dest: Lighthouse-win-x64.zip

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/osx-x64
          dest: Lighthouse-osx-x64.zip

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/linux-x64
          dest: Lighthouse-linux-x64.zip

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "Lighthouse-win-x64.zip,Lighthouse-osx-x64.zip, Lighthouse-linux-x64.zip"
          tag: ${{ needs.tag.outputs.version }}
          prerelease: true
          name: "Lighthouse ${{ needs.tag.outputs.version }}"