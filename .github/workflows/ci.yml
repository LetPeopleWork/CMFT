name: Build And Deploy Lighthouse

env:
  DOTNET_VERSION: '8'  
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AzureDevOpsLighthouseIntegrationTestToken: ${{ secrets.AZUREDEVOPSLIGHTHOUSEINTEGRATIONTESTTOKEN }}
  JiraLighthouseIntegrationTestToken: ${{ secrets.JIRALIGHTHOUSEINTEGRATIONTESTTOKEN }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  

jobs:
  backend:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Use Node.js
      uses: actions/setup-node@v4

    - name: Remove Frontend sonar-project.properties
      run: |
        rm ./Lighthouse.Frontend/sonar-project.properties

    - name: Backend Build Test SonarCloud
      uses: highbyte/sonarscan-dotnet@v2.3.1
      with:
        sonarProjectKey: LetPeopleWork_Lighthouse
        sonarProjectName:  Lighthouse.Backend
        sonarOrganization: letpeoplework
        dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
  
  frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'

    - name: Use Node.js
      uses: actions/setup-node@v4

    - name: Install npm dependencies
      run: npm install
      working-directory: ./Lighthouse.Frontend

    - name: Lint Frontend
      run: npm run lint
      working-directory: ./Lighthouse.Frontend

    - name: Build Frontend
      run: npm run build
      working-directory: ./Lighthouse.Frontend

    - name: Test Frontend
      run: npm test
      working-directory: ./Lighthouse.Frontend

    - name: Generate Sonar Files
      run: npm run sonarreport
      working-directory: ./Lighthouse.Frontend

    - name: Frontend SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      working-directory: ./Lighthouse.Frontend
      run: |
        npm install -g sonarqube-scanner
        sonar-scanner
        
  tag:
    runs-on: ubuntu-latest
    needs:
      - backend
      - frontend

    if: github.ref == 'refs/heads/main'
    permissions: write-all

    steps:          
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Create tag if necessary
        id: version
        uses: fregante/daily-version-action@v2
        with:
          prefix: v
    
      
    outputs:
      created: ${{ steps.version.outputs.created }}
      version: ${{ steps.version.outputs.version }}

  docker:
    runs-on: ubuntu-latest
    needs: tag

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Build and publish a Docker image for ${{ github.repository }}
        uses: macbre/push-to-ghcr@master        
        with:
          image_name: ${{ github.repository }} 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          build_arg: VERSION=${{ needs.tag.outputs.version }}
          dockerfile: Lighthouse.Backend/Dockerfile        

  deploy:
    runs-on: ubuntu-latest
    needs: tag

    if: github.ref == 'refs/heads/main'   

    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    permissions:
      contents: write
      id-token: write

    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.DOTNET_ROOT}}

      - name: Install npm dependencies
        run: npm install
        working-directory: ./Lighthouse.Frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./Lighthouse.Frontend

      - name: Update AppSettings
        uses: ./.github/actions/update-appsettings
        with:
          app_version: ${{ needs.tag.outputs.version }}

      - name: publish win-x64
        run: dotnet publish -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.version }} -o ./publish/win-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_windows.ps1
        run: cp ./Scripts/update_windows.ps1 ./Lighthouse.Backend/publish/win-x64/update_windows.ps1

      - name: publish osx-x64
        run: dotnet publish -c Release -r osx-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.version }} -o ./publish/osx-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_mac.sh
        run: cp ./Scripts/update_mac.sh ./Lighthouse.Backend/publish/osx-x64/update_mac.sh

      - name: Set osx executable permission
        run: chmod +x ./publish/osx-x64/Lighthouse
        working-directory: ./Lighthouse.Backend

      - name: publish linux-x64
        run: dotnet publish -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.version }} -o ./publish/linux-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_linux.sh
        run: cp ./Scripts/update_linux.sh ./Lighthouse.Backend/publish/linux-x64/update_linux.sh

      - name: Set linux executable permission
        run: chmod +x ./publish/linux-x64/Lighthouse
        working-directory: ./Lighthouse.Backend

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: ./Lighthouse.Backend/publish

      - name: publish app-service
        run: dotnet publish -c Release /p:UseAppHost=false -p:PublishSingleFile=false --no-self-contained -p:Version=${{ needs.tag.outputs.version }} -o ./publish/app-service
        working-directory: ./Lighthouse.Backend

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8A96BB1E9EB043EE9CB0B648544834B0 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_6D622DE733434D3A987E82D0DBCEE2B3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6A0B9B55694C47F4A1D8CEA847E84D78 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp  
        uses: azure/webapps-deploy@v2  
        with:  
          app-name: 'LighthouseCloudDemo'  
          slot-name: 'production'  
          package: ./Lighthouse.Backend/publish/app-service
  
  release:
    runs-on: ubuntu-latest
    needs:
    - tag
    - deploy
    - docker

    if: github.ref == 'refs/heads/main'   

    environment:
      name: Release

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Build and publish a Docker image for ${{ github.repository }}
        uses: macbre/push-to-ghcr@master        
        with:
          image_name: ${{ github.repository }} 
          github_token: ${{ secrets.GITHUB_TOKEN }}
          dockerfile: Lighthouse.Backend/Dockerfile
          image_tag: ${{ needs.tag.outputs.version }}

      - uses: actions/download-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: LighthouseArtifacts

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/win-x64
          dest: Lighthouse_${{ needs.tag.outputs.version }}_win-x64.zip

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/osx-x64
          dest: Lighthouse_${{ needs.tag.outputs.version }}_osx-x64.zip

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/linux-x64
          dest: Lighthouse_${{ needs.tag.outputs.version }}_linux-x64.zip

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "Lighthouse_${{ needs.tag.outputs.version }}_win-x64.zip,Lighthouse_${{ needs.tag.outputs.version }}_osx-x64.zip, Lighthouse_${{ needs.tag.outputs.version }}_linux-x64.zip"
          tag: ${{ needs.tag.outputs.version }}
          prerelease: true
          name: "Lighthouse ${{ needs.tag.outputs.version }}"