name: Build And Deploy Lighthouse

env:
  DOTNET_VERSION: '8'  
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AzureDevOpsLighthouseIntegrationTestToken: ${{ secrets.AZUREDEVOPSLIGHTHOUSEINTEGRATIONTESTTOKEN }}
  JiraLighthouseIntegrationTestToken: ${{ secrets.JIRALIGHTHOUSEINTEGRATIONTESTTOKEN }}
  AzureDevOpsLighthouseE2ETestToken: ${{secrets.AZUREDEVOPSLIGHTHOUSEE2ETESTTOKEN}}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  

jobs:

  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.check.outputs.backend }}
      frontend: ${{ steps.check.outputs.frontend }}
      e2e: ${{ steps.check.outputs.e2e }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: check
        run: |
          base_ref=${{ github.base_ref }}
          if [ -z "$base_ref" ]; then
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            # On main branch, use the last version tag as base
            base_ref=$(git describe --tags --abbrev=0)
          else
            # Default to checking against the previous commit on other branches
            base_ref=$(git rev-parse HEAD^)
          fi
          else
          git fetch origin $base_ref
          base_ref="origin/$base_ref"
          fi

          # Print all changed files
          echo "Changed files:"
          git diff --name-only $base_ref HEAD

          github_changes=$(git diff --name-only $base_ref HEAD | grep -q ^.github/ && echo 'true' || echo 'false')
          backend=$(git diff --name-only $base_ref HEAD | grep -Eq '^Lighthouse.Backend(/|.Tests/)' || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')
          frontend=$(git diff --name-only $base_ref HEAD | grep -q ^Lighthouse.Frontend/ || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')
          e2e=$(git diff --name-only $base_ref HEAD | grep -q ^Lighthouse.EndToEndTests/ || [ "$github_changes" == "true" ] && echo 'true' || echo 'false')

          echo "backend=$backend"
          echo "frontend=$frontend"
          echo "e2e=$e2e"
          echo "backend=$backend" >> $GITHUB_OUTPUT
          echo "frontend=$frontend" >> $GITHUB_OUTPUT
          echo "e2e=$e2e" >> $GITHUB_OUTPUT

  backend:
    name: Verify Backend
    needs: changes
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      if: needs.changes.outputs.backend == 'true'
      with:
        fetch-depth: '0'

    - name: Remove Frontend sonar-project.properties
      if: needs.changes.outputs.backend == 'true'
      run: |
        rm ./Lighthouse.Frontend/sonar-project.properties

    - name: Backend Build Test SonarCloud
      if: needs.changes.outputs.backend == 'true'
      uses: highbyte/sonarscan-dotnet@v2.3.1
      with:
        sonarProjectKey: LetPeopleWork_Lighthouse
        sonarProjectName:  Lighthouse.Backend
        sonarOrganization: letpeoplework
        dotnetTestArguments: --logger trx --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        sonarBeginArguments: /d:sonar.cs.opencover.reportsPaths="**/TestResults/**/coverage.opencover.xml" -d:sonar.cs.vstest.reportsPaths="**/TestResults/*.trx"
  
  frontend:
    name: Verify Frontend
    needs: changes
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      if: needs.changes.outputs.frontend == 'true'
      with:
        fetch-depth: '0'

    - name: Use Node.js
      if: needs.changes.outputs.frontend == 'true'
      uses: actions/setup-node@v4

    - name: Install npm dependencies
      if: needs.changes.outputs.frontend == 'true'
      run: npm install
      working-directory: ./Lighthouse.Frontend

    - name: Lint Frontend
      if: needs.changes.outputs.frontend == 'true'
      run: npm run lint
      working-directory: ./Lighthouse.Frontend

    - name: Build Frontend
      if: needs.changes.outputs.frontend == 'true'
      run: npm run build
      working-directory: ./Lighthouse.Frontend

    - name: Test Frontend
      if: needs.changes.outputs.frontend == 'true'
      run: npm test
      working-directory: ./Lighthouse.Frontend

    - name: Generate Sonar Files
      if: needs.changes.outputs.frontend == 'true'
      run: npm run sonarreport
      working-directory: ./Lighthouse.Frontend

    - name: Frontend SonarCloud
      if: needs.changes.outputs.frontend == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      working-directory: ./Lighthouse.Frontend
      run: |
        npm install -g sonarqube-scanner
        sonar-scanner

  e2etests:
    name: Verify End to End Tests
    needs: changes

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      if: needs.changes.outputs.e2e == 'true'
      with:
        fetch-depth: '0'

    - name: Use Node.js
      if: needs.changes.outputs.e2e == 'true'
      uses: actions/setup-node@v4

    - name: Install npm dependencies
      if: needs.changes.outputs.e2e == 'true'
      run: npm install
      working-directory: ./Lighthouse.EndToEndTests

    - name: Lint Frontend
      if: needs.changes.outputs.e2e == 'true'
      run: npm run lint
      working-directory: ./Lighthouse.EndToEndTests

    - name: Build Frontend
      if: needs.changes.outputs.e2e == 'true'
      run: npm run build
      working-directory: ./Lighthouse.EndToEndTests

  tag:
    runs-on: ubuntu-latest
    permissions: write-all

    needs: 
      - frontend
      - backend
      - e2etests

    steps:          
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
      
      - name: Set version based on branch
        id: set_version
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Running on main branch, creating tag if necessary"
            echo "create_tag=true" >> $GITHUB_ENV
          else
            echo "Not on main branch, setting version to current build number"
            echo "version=${{ github.run_number }}" >> $GITHUB_ENV
            echo "create_tag=false" >> $GITHUB_ENV
          fi

      - name: Create tag if necessary
        if: env.create_tag == 'true'
        id: version
        uses: fregante/daily-version-action@v2
        with:
          prefix: v

      - name: Process version to create fileversion
        id: process_version
        run: |
          if [ "${{ env.create_tag }}" == "true" ]; then
            version=${{ steps.version.outputs.version }}
          else
            version=${{ env.version }}
          fi
          # Remove the prefix 'v' from the version string if it exists
          fileversion=${version#v}
          # Output the processed fileversion
          echo "fileversion=$fileversion" >> $GITHUB_ENV
          echo "fileversion=$fileversion" >> $GITHUB_OUTPUT
    
      
    outputs:
      created: ${{ steps.version.outputs.created }}
      version: ${{ steps.version.outputs.version }}
      fileversion: ${{ steps.process_version.outputs.fileversion }}

  packageapp:
    name: Package and Test App
    runs-on: ubuntu-latest
    needs: tag

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.DOTNET_ROOT}}

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install npm dependencies
        run: npm install
        working-directory: ./Lighthouse.Frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./Lighthouse.Frontend

      - name: publish win-x64
        run: dotnet publish -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/win-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_windows.ps1
        run: cp ./Scripts/update_windows.ps1 ./Lighthouse.Backend/publish/win-x64/update_windows.ps1

      - name: publish osx-x64
        run: dotnet publish -c Release -r osx-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/osx-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_mac.sh
        run: cp ./Scripts/update_mac.sh ./Lighthouse.Backend/publish/osx-x64/update_mac.sh

      - name: Set osx executable permission
        run: sudo chmod +x ./publish/osx-x64/Lighthouse
        working-directory: ./Lighthouse.Backend

      - name: publish linux-x64
        run: dotnet publish -c Release -r linux-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/linux-x64
        working-directory: ./Lighthouse.Backend

      - name: Copy update_linux.sh
        run: cp ./Scripts/update_linux.sh ./Lighthouse.Backend/publish/linux-x64/update_linux.sh

      - name: Set linux executable permission
        run: sudo chmod -R +x ./publish/linux-x64
        working-directory: ./Lighthouse.Backend

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: ./Lighthouse.Backend/publish      

      - name: Install E2E dependencies
        run: npm ci
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
  
      - name: Install Chromium
        run: npx playwright install chromium --with-deps
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests

      - name: Run Lighthouse
        run: |
          ./Lighthouse > lighthouse.log 2>&1 &
        working-directory: ./Lighthouse.Backend/publish/linux-x64

      - name: Wait for Lighthouse to start
        run: |
          echo "Waiting for server to be ready..."
          timeout 30 bash -c 'until curl --silent --fail http://localhost:5000; do sleep 1; done'
          echo "Server is ready!"

          cat lighthouse.log
        working-directory: ./Lighthouse.Backend/publish/linux-x64
  
      - name: Run Playwright tests
        run: npx playwright test
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
        env:
          LIGHTHOUSEURL: http://localhost:5000
  
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-linux
          path: ./Lighthouse.EndToEndTests/playwright-report/
          retention-days: 30

      - name: Stop Lighthouse Server
        if: always()
        run: |
          pkill Lighthouse || true
          cat ./publish/linux-x64/lighthouse.log
          rm -rf ./publish/linux-x64/logs
        working-directory: ./Lighthouse.Backend

  docker:
    runs-on: ubuntu-latest
    needs:
      - tag
      - packageapp
      - changes

    #if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          # Automatically sets up the default builder
          use: true

      - name: Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64        

      - name: Build and push multi-platform Docker image
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          VERSION=${{ needs.tag.outputs.fileversion }}

          # Define platforms you want to support
          PLATFORMS="linux/amd64,linux/arm64"

          # Build and push the multi-platform image
          docker buildx build --platform $PLATFORMS --no-cache \
            --file Lighthouse.Backend/Dockerfile \
            --tag ghcr.io/$REPO_NAME:$VERSION \
            --tag ghcr.io/$REPO_NAME:dev-latest \
            --build-arg VERSION=$VERSION \
            --push .

      - name: Install E2E dependencies
        run: npm ci
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
  
      - name: Install Chromium
        run: npx playwright install chromium --with-deps
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
          
      - name: Run Lighthouse
        run: docker run -p 8080:8080 -d --restart always ghcr.io/letpeoplework/lighthouse:dev-latest
        working-directory: ./Lighthouse.Backend

      - name: Wait for Lighthouse to start
        run: |
          echo "Waiting for server to be ready..."
          timeout 30 bash -c 'until curl --silent --fail http://localhost:8080; do sleep 1; done'
          echo "Server is ready!"
  
      - name: Run Playwright tests
        run: npx playwright test
        shell: bash
        working-directory: ./Lighthouse.EndToEndTests
        env:
          LIGHTHOUSEURL: http://localhost:8080
  
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-docker
          path: ./Lighthouse.EndToEndTests/playwright-report/
          retention-days: 30
    
      - name: Tag docker image with version
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker pull ghcr.io/$REPO_NAME:dev-latest
          docker tag ghcr.io/$REPO_NAME:dev-latest ghcr.io/$REPO_NAME:${{ needs.tag.outputs.version }}
          docker push ghcr.io/$REPO_NAME:${{ needs.tag.outputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - tag
      - packageapp
      - changes

    if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]' && (needs.changes.outputs.frontend == 'true' || needs.changes.outputs.backend == 'true')

    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.DOTNET_ROOT}}

      - name: Install npm dependencies
        run: npm install
        working-directory: ./Lighthouse.Frontend

      - name: Build Frontend
        run: npm run build
        working-directory: ./Lighthouse.Frontend

      - name: publish app-service
        run: dotnet publish -c Release /p:UseAppHost=false -p:PublishSingleFile=false --no-self-contained -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/app-service
        working-directory: ./Lighthouse.Backend

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_8A96BB1E9EB043EE9CB0B648544834B0 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_6D622DE733434D3A987E82D0DBCEE2B3 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6A0B9B55694C47F4A1D8CEA847E84D78 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp  
        uses: azure/webapps-deploy@v2  
        with:  
          app-name: 'LighthouseCloudDemo'  
          slot-name: 'production'  
          package: ./Lighthouse.Backend/publish/app-service

      - name: Build Demo Frontend
        run: npm run build-demo
        working-directory: ./Lighthouse.Frontend

      - name: publish demo-app-service
        run: dotnet publish -c Release /p:UseAppHost=false -p:PublishSingleFile=false --no-self-contained -p:Version=${{ needs.tag.outputs.fileversion }} -o ./publish/app-service-demo
        working-directory: ./Lighthouse.Backend

      - name: Login to Azure Demo
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_D7E0D36B15D941ADA2E6DC045BD2657C }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_64D9025B99C440B99E3CA60650996BC9 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_F83A94E3D5A4415D80A648231AD879CE }}

      - name: Deploy to Azure Demo Web App
        id: deploy-to-demo-webapp  
        uses: azure/webapps-deploy@v2  
        with:  
          app-name: 'lighthousepublicdemo'  
          slot-name: 'production'  
          package: ./Lighthouse.Backend/publish/app-service-demo
      
  release:
    runs-on: ubuntu-latest
    needs:
    - tag
    - deploy
    - docker

    if: github.ref == 'refs/heads/main' && github.actor != 'dependabot[bot]'

    environment:
      name: Release

    permissions: write-all

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Tag docker image with latest
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          docker pull ghcr.io/$REPO_NAME:${{ needs.tag.outputs.version }}
          docker tag ghcr.io/$REPO_NAME:${{ needs.tag.outputs.version }} ghcr.io/$REPO_NAME:latest
          docker push ghcr.io/$REPO_NAME:latest

      - uses: actions/download-artifact@v4
        with:
          name: Lighthouse ${{ needs.tag.outputs.version }}
          path: LighthouseArtifacts

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/win-x64
          dest: Lighthouse-win-x64.zip

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/osx-x64
          dest: Lighthouse-osx-x64.zip

      - uses: vimtor/action-zip@v1.2
        with:
          files: LighthouseArtifacts/linux-x64
          dest: Lighthouse-linux-x64.zip

      - uses: ncipollo/release-action@v1
        with:
          artifacts: "Lighthouse-win-x64.zip,Lighthouse-osx-x64.zip, Lighthouse-linux-x64.zip"
          tag: ${{ needs.tag.outputs.version }}
          prerelease: true
          name: "Lighthouse ${{ needs.tag.outputs.version }}"